#version 460

// this shader does not apply TAA with jitter, because it was made to be used with ray-tracing

// all sampler2Ds should be bound with a "closest neighbor"-sampler
layout (binding = 0) uniform sampler2D depthImage;
layout (binding = 1) uniform sampler2D prevDepthImage;
layout (binding = 2) uniform sampler2D baseImage;
layout (binding = 3) uniform sampler2D prevBaseImage;
layout (binding = 4) uniform sampler2D velocityImage;

layout (binding = 5, rgba16) uniform image2D resultImage;

layout (binding = 6) buffer SampleCountBuffer
{
	uint sampleCounts[];
} sampleCountBuffer;

layout (push_constant) uniform Constant 
{
	mat4 projInv;
	mat4 projViewInv;
	mat4 prevProjView;
	int width;
	int height;
	int maxSampleCount;
} constant;

float GetLinearDepth(ivec2 coords, float depth)
{
	vec2 relCoords = (coords + 0.5) / vec2(constant.width, constant.height); // + 0.5 for the pixel offset
	vec2 ndc = vec2(relCoords.x, 1.0 - relCoords.y) * 2.0 - 1.0;
	vec4 projected = constant.projInv * vec4(ndc, depth, 1.0);

	return abs(projected.z / projected.w);
}

ivec2 GetPreviousCoordinates(ivec2 absCoords, ivec2 size)
{
	vec2 velocity = floor(texelFetch(velocityImage, absCoords, 0).rg / 2 * vec2(size) + 0.5);

	ivec2 prevCoords = ivec2(absCoords - velocity);
	return clamp(prevCoords, ivec2(0), size - ivec2(1));
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in; // total size should be the size of the image to apply TAA to
void main() // https://columbusutrigas.com/posts/rtgi/
{
	vec2 relCoords = (vec2(gl_GlobalInvocationID.xy) + 0.5) / vec2(constant.width, constant.height);
	ivec2 absCoords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = ivec2(constant.width, constant.height);

	ivec2 prevCoords = GetPreviousCoordinates(absCoords, size);

	vec2 ndc = vec2(relCoords.x, 1.0 - relCoords.y) * 2.0 - 1.0;

	float depth = texelFetch(depthImage, absCoords, 0).r;

	vec4 worldspace = constant.projViewInv * vec4(ndc, depth, 1.0);
	worldspace /= worldspace.w;

	vec4 prevNdc = constant.prevProjView * worldspace;
	prevNdc /= prevNdc.w;

	uint prevSampleIndex = prevCoords.y * constant.width + prevCoords.x;
	uint sampleIndex = absCoords.y * constant.width + absCoords.x;
	uint sampleCount = sampleCountBuffer.sampleCounts[prevSampleIndex];

	float prevDepth = texelFetch(prevDepthImage, prevCoords, 0).r;

	float reprojLinearDepth = GetLinearDepth(absCoords, prevNdc.z);
	float prevLinearDepth = GetLinearDepth(prevCoords, prevDepth);

	float depthDiff = abs(prevLinearDepth - reprojLinearDepth) / reprojLinearDepth;

	if (depthDiff >= 0.01)
		sampleCount = 0;
	else
		sampleCount++;

	sampleCount = clamp(sampleCount, 0U, constant.maxSampleCount);

	vec3 prevColor = texelFetch(prevBaseImage, prevCoords, 0).rgb;
	vec3 currColor = texelFetch(baseImage, absCoords, 0).rgb;

	float weight = 1.0 / (float(sampleCount) + 1.0);
	vec3 result = mix(prevColor, currColor, weight);

	imageStore(resultImage, absCoords, vec4(result, 1.0));
	sampleCountBuffer.sampleCounts[sampleIndex] = sampleCount;
}