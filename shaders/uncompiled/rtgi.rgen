#version 460
#extension GL_EXT_ray_tracing : require

#define PI 3.14159265359
#define TWO_PI (PI * 2)
#define ONE_OVER_PI (1 / PI)

layout(location = 0) rayPayloadEXT Payload {
	vec3 origin;
	vec3 direction;
	vec3 color;
	vec3 mixedAlbedo;

	vec3 normal;

	float pdf;

	int depth;

	int isActive;
} payload;

layout(push_constant) uniform Camera
{
	uint frame;
	int sampleCount;
	int bounceCount;
	vec3 position;
} camera;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

layout(binding = 1, set = 0, rgba8) uniform image2D globalIlluminationImage;
layout(binding = 2, set = 0) uniform sampler2D albedoImage;
layout(binding = 3, set = 0) uniform sampler2D normalImage;
layout(binding = 4, set = 0) uniform sampler2D positionImage;

vec3 CosineSampleHemisphereLocal(vec2 random, out float pdf) // https://github.com/boksajak/brdf/blob/master/brdf.h
{
	float a = sqrt(random.x);
	float b = TWO_PI * random.y;

	vec3 ret = vec3(a * cos(b), a * sin(b), sqrt(1.0 - random.x));
	pdf = ret.z * ONE_OVER_PI;

	return ret;
}

mat3 GetBasisFromVector(vec3 normal) // https://columbusutrigas.com/posts/rtgi/
{
	vec3 up = abs(normal.y) < 0.999 ? vec3(0, 1, 0) : vec3(1, 0, 0);

	vec3 x = normalize(cross(up, normal));
	vec3 y = cross(normal, x);
	vec3 z = normal;

	return mat3(x, y, z);
}

vec3 CosineSampleHemisphere(vec2 random, vec3 normal, out float pdf)
{
	vec3 local = CosineSampleHemisphereLocal(random, pdf);
	mat3 trans = GetBasisFromVector(normal);

	return trans * local;
}

vec3 CosineSampleHemisphereNew(vec2 random, vec3 normal) // https://www.shadertoy.com/view/fdS3zw
{
    float r = sqrt(random.x);
    float theta = TWO_PI * random.y;
 
    vec3 B = normalize(cross(normal, vec3(0.0,1.0,1.0)));
	vec3 T = cross(B, normal);
    
    return normalize(r * sin(theta) * B + sqrt(1.0 - random.x) * normal + r * cos(theta) * T);
}

vec3 UniformSampleHemisphere(vec2 random, vec3 normal, out float pdf)
{
	pdf = 1.0;

    float r = sqrt(1.0 - random.x * random.x);
    float phi = TWO_PI * random.y;
    
    vec3  B = normalize(cross(normal, vec3(0.0,1.0,1.0)));
	vec3  T = cross(B, normal);
    
    return normalize(r * sin(phi) * B + random.x * normal + r * cos(phi) * T);
}

// PCG (permuted congruential generator). Thanks to:
// www.pcg-random.org and www.shadertoy.com/view/XlGcRh
uint NextRandom(inout uint state)
{
	state = state * 747796405 + 2891336453;
	uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
	result = (result >> 22) ^ result;
	return result;
}

float RandomValue(inout uint state)
{
	return NextRandom(state) / 4294967295.0; // 2^32 - 1
}

void main()
{
	uint state = gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x;
	state *= camera.frame;

	vec2 relCoors = vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy);

	vec3 normal   = normalize(texture(normalImage, relCoors).xyz);
	vec3 position = texture(positionImage, relCoors).xyz;

	if (normal == vec3(0))
	{
		imageStore(globalIlluminationImage, ivec2(gl_LaunchIDEXT.xy), vec4(0, 0, 0, 1));
		return;
	}

	vec3 color = vec3(0);

	for (int i = 0; i < camera.sampleCount; i++)
	{
		payload.origin = position;
		payload.direction = vec3(0);
		payload.color = vec3(0);
		payload.mixedAlbedo = vec3(1);
		payload.normal = normal;
		payload.depth = 0;
		payload.isActive = 1;

		vec2 random = vec2(RandomValue(state), RandomValue(state));

		for (int j = 0; j < camera.bounceCount; j++)
		{
			payload.direction = CosineSampleHemisphere(random, payload.normal, payload.pdf);

			traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT | gl_RayFlagsCullBackFacingTrianglesEXT, 0xFF, 0, 0, 0, payload.origin, 0.001, payload.direction, 1000.0, 0);
			
			if (payload.isActive == 0)
				break;

			payload.pdf = max(0.0, payload.pdf);
		}
		color += payload.color * payload.mixedAlbedo / float(payload.depth);
	}

	vec3 result = color / float(camera.sampleCount);

	imageStore(globalIlluminationImage, ivec2(gl_LaunchIDEXT.xy), vec4(result, 1));
}