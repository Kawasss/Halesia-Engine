#version 460
#define MAX_LIGHT_INDICES 7

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Cell
{
	float lightCount;
	float lightIndices[MAX_LIGHT_INDICES]; // this uses floats because the padding for ints is messed up
};

layout (std430, set = 0, binding = 0) buffer Cells
{
	uint depth;
	uint width;
	uint height;
	Cell data[];
} cells;

layout (set = 0, binding = 1) readonly buffer Lights
{
	vec3 position[];
} lights;

layout (set = 0, binding = 2) uniform Matrices
{
	mat4 proj;
	mat4 view;
} matrices;

float GetLinearizedDepth(float depth)
{
    return (2 * 0.01f * 1000.0f) / (1000.0f - depth * (1000.0f - 0.01f)) / 1000.0f;
}

// attenuation: f(x) = 1 / x ^ 2, where attenuation determines the reach of a light
#define MAX_ATTENUATION_FAST    10.0          // attenuation = 0.01
#define MAX_ATTENUATION_MEDIUM  31.6227766017 // attenuation = 0.001
#define MAX_ATTENUATION_PRECISE 100.0         // attenuation = 0.0001

vec3 GetScreenSpace(vec3 pos)
{
	vec4 screenSpace = matrices.proj * matrices.view * vec4(pos, 1);
	screenSpace.xy = (screenSpace.xy / screenSpace.w + 1) * 0.5f;
	screenSpace.z = clamp(GetLinearizedDepth(screenSpace.z), 0.0, 1.0);

	return screenSpace.xyz;
}

vec3 ConvertScreenSpaceToCellSpace(vec3 screenSpace)
{
	return floor(screenSpace * vec3(cells.width, cells.height, cells.depth));
}

uint GetZIndex(float z)
{
	uint sliceSize = cells.width * cells.height;
	return uint(z * sliceSize);
}

void main()
{
	vec3 pos = lights.position[gl_GlobalInvocationID.x];
	vec3 screenSpace = GetScreenSpace(pos);
	vec3 extentScreen = GetScreenSpace(pos + vec3(MAX_ATTENUATION_FAST, 0, 0));

	vec3 cellSpace = ConvertScreenSpaceToCellSpace(screenSpace);
	vec3 maxReach  = ConvertScreenSpaceToCellSpace(extentScreen);

	int reach = int(ceil(abs(maxReach.x - cellSpace.x)));

	ivec2 minimum = ivec2(cellSpace.xy) - ivec2(reach);
	ivec2 maximum = ivec2(cellSpace.xy) + ivec2(reach);

	minimum.x = clamp(minimum.x, 0, int(cells.width)  - 1);
	minimum.y = clamp(minimum.y, 0, int(cells.height) - 1);

	maximum.x = clamp(maximum.x, 0, int(cells.width));
	maximum.y = clamp(maximum.y, 0, int(cells.height));

	// the limiting factor of this method is that it doesnt extent into the z axis
	for (int x = minimum.x; x < maximum.x; x++)
	{
		for (int y = minimum.y; y < maximum.y; y++)
		{
			// the circle equation for the light is (x - cellSpace.x)^2 + (y - cellSpace.y)^2 = reach^2.
			// the reach is needed, so the equation is rewritten into reach = sqrt( (x - cellSpace.x)^2 + (y - cellSpace.y)^2 ).
			// the point (x, y) is only inside the lights radius if the result is smaller than the reach thats calculated earlier.
			float dist = sqrt(pow(x - cellSpace.x, 2) + pow(y - cellSpace.y, 2));

			if (dist > reach)
				continue;

			uint cellImageIndex = cells.height * x + y;
			uint fullIndex = GetZIndex(cellSpace.z) + cellImageIndex;

			if (fullIndex >= cells.width * cells.height * cells.depth)
				continue; // out of bounds failsafe, just in case

			uint lightCountIndex = uint(cells.data[fullIndex].lightCount++);
			lightCountIndex = min(lightCountIndex, MAX_LIGHT_INDICES);

			cells.data[fullIndex].lightIndices[lightCountIndex] = float(gl_GlobalInvocationID.x);
		}
	}
}