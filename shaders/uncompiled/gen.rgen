#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

#define M_PI 3.1415926535897932384626433832795

layout(location = 0) rayPayloadEXT Payload {
  vec3 rayOrigin;
  vec3 rayDirection;
  
  vec3 directColor;
  vec3 indirectColor;
  int rayDepth;

  int rayActive;
  uint64_t intersectedObjectHandle;
  vec3 normal;
  vec3 albedo;
  vec2 motion;
} payload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0) uniform Camera {
  vec4 position;
  mat4 viewInv;
  mat4 projInv;
  uvec2 mouseXY;

  uint frameCount;
  int showUnique;
  int raySamples;
  int rayDepth;
  int renderProgressive;
  int whiteAlbedo;
  vec3 directionalLightDir;
} camera;

layout (binding = 4, set = 0, rgba32f) uniform image2D image;
layout (binding = 5, set = 0, rgba32f) uniform image2D albedoImage;
layout (binding = 6, set = 0, rgba32f) uniform image2D normalImage;
layout (binding = 7, set = 0) writeonly buffer IntersectedObject
{
    uint64_t handle;
} intersectedObject;
layout (binding = 8, set = 0) buffer motionImage
{
    vec2 data[];
} MotionImage;

float random(vec2 uv, float seed) {
  return fract(sin(mod(dot(uv, vec2(12.9898, 78.233)) + 1113.1 * seed, M_PI)) * 43758.5453);
}

// PCG (permuted congruential generator). Thanks to:
// www.pcg-random.org and www.shadertoy.com/view/XlGcRh
uint NextRandom(inout uint state)
{
	state = state * 747796405 + 2891336453;
	uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
	result = (result >> 22) ^ result;
	return result;
}

float RandomValue(inout uint state)
{
	return NextRandom(state) / 4294967295.0; // 2^32 - 1
}

void main() {
  payload.rayActive = 1;
  if (camera.mouseXY == gl_LaunchIDEXT.xy)
  {
    payload.intersectedObjectHandle = 0;
    intersectedObject.handle = 0;
  }

  vec3 color = vec3(0);
  vec3 firstAlbedo = vec3(0);
  vec3 firstNormal = vec3(0);
  vec2 firstMotion = vec2(0);

  uint rng = gl_LaunchIDEXT.x * gl_LaunchIDEXT.y * camera.frameCount * 719393;
  for (int j = 0; j < camera.raySamples; j++)
  {
      vec2 center = vec2(gl_LaunchIDEXT.xy) + vec2(RandomValue(rng), RandomValue(rng));
      vec2 inUV = center / vec2(gl_LaunchSizeEXT.xy);
      vec2 uv = inUV * 2.0 - 1.0;

      vec4 target = camera.projInv * vec4(uv.x, uv.y, 1, 1);
      payload.rayOrigin = camera.position.xyz;
      payload.rayDirection = (camera.viewInv * vec4(normalize(target.xyz), 0)).xyz;
      payload.normal = vec3(0.0, 0.0, 0.0);

      payload.directColor = vec3(1);
      payload.indirectColor = vec3(0.0, 0.0, 0.0);
      payload.rayDepth = 0;
      payload.rayActive = 1;

      for (int i = 0; i < camera.rayDepth; i++) 
      {
        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, payload.rayOrigin, 0.001, payload.rayDirection, 10000.0, 0);
        if (i == 0 && j == 0)
        {
            firstAlbedo = payload.albedo;
            firstNormal = payload.normal;
            firstMotion = payload.motion;
            if (camera.mouseXY == gl_LaunchIDEXT.xy)
                intersectedObject.handle = payload.intersectedObjectHandle;
        }
      }
      if (payload.rayDepth == 0) 
        payload.rayDepth = 1;
      color += payload.indirectColor / payload.rayDepth;
  }
  color /= camera.raySamples;

  vec2 prevMotion = MotionImage.data[gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y];
  ivec2 prevPos = ivec2(gl_LaunchIDEXT.xy + payload.motion);

  //if (abs(distance(payload.motion, prevMotion)) < 0.1)
  //{
    vec3 old = imageLoad(image, prevPos).xyz;
    if (color == vec3(0.0f))
        color = old;
    else if (old != vec3(0))
        color = (color + old) * 0.5f;
  //}

  imageStore(albedoImage, ivec2(gl_LaunchIDEXT.xy), vec4(firstAlbedo, 1));
  imageStore(normalImage, ivec2(gl_LaunchIDEXT.xy), vec4(firstNormal, 1)); 
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));
  MotionImage.data[gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y] = firstMotion;
}