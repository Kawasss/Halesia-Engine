#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : enable

#define M_PI 3.1415926535897932384626433832795

layout(location = 0) rayPayloadEXT Payload {
  vec3 rayOrigin;
  vec3 rayDirection;
  vec3 previousNormal;

  vec3 directColor;
  vec3 indirectColor;
  int rayDepth;

  int rayActive;
  uint64_t intersectedObjectHandle;
} payload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0) uniform Camera {
  vec4 position;
  vec4 right;
  vec4 up;
  vec4 forward;
  uvec2 mouseXY;

  uint frameCount;
  int showNormals;
  int showUnique;
  int showAlbedo;
  int raySamples;
  int rayDepth;
  int renderProgressive;
} camera;

layout (binding = 4, set = 0, rgba32f) uniform image2D image;
layout (binding = 5, set = 0) writeonly buffer IntersectedObject
{
    uint64_t handle;
} intersectedObject;

float random(vec2 uv, float seed) {
  return fract(sin(mod(dot(uv, vec2(12.9898, 78.233)) + 1113.1 * seed, M_PI)) * 43758.5453);
}

void main() {
  payload.rayActive = 1;

  vec3 color = vec3(0);

  for (int j = 0; j < camera.raySamples; j++)
  {
      vec2 uv = gl_LaunchIDEXT.xy + vec2(random(gl_LaunchIDEXT.xy, camera.frameCount * 754 * j), random(gl_LaunchIDEXT.xy, camera.frameCount * 5436 * (j / 1.5)));
      uv /= vec2(gl_LaunchSizeEXT.xy);
      uv = (uv * 2.0f - 1.0f) * vec2(1.0f, -1.0f);

      payload.rayOrigin = camera.position.xyz;
      payload.rayDirection = normalize(uv.x * camera.right + uv.y * camera.up + camera.forward).xyz;
      payload.previousNormal = vec3(0.0, 0.0, 0.0);

      payload.directColor = vec3(1);
      payload.indirectColor = vec3(0.0, 0.0, 0.0);
      payload.rayDepth = 0;

      for (int x = 0; x < camera.rayDepth; x++) {
        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, payload.rayOrigin, 0.001, payload.rayDirection, 10000.0, 0);
        if (x == 0 && camera.mouseXY == gl_LaunchIDEXT.xy)
            intersectedObject.handle = payload.intersectedObjectHandle;
      }
      color += payload.indirectColor / payload.rayDepth;
  }
  color /= camera.raySamples;
  color = pow(color, vec3(1 / 2.2));

  if (camera.renderProgressive == 1)
  {
    vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    float weight = 1.0f / (camera.frameCount + 1);
    vec3 average = oldColor * (1.0f - weight) + color * weight;
    color = clamp(average, 0.0, 1.0);
  }
  
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));
}