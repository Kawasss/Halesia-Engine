#version 460
#extension GL_EXT_ray_tracing : require

#define M_PI 3.1415926535897932384626433832795

layout(location = 0) rayPayloadEXT Payload {
  vec3 rayOrigin;
  vec3 rayDirection;
  vec3 previousNormal;

  vec3 directColor;
  vec3 indirectColor;
  int rayDepth;

  int rayActive;
}
payload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0) uniform Camera {
  vec4 position;
  vec4 right;
  vec4 up;
  vec4 forward;

  uint frameCount;
  int showPrimitveID;
  uint primitiveCount;
  int raySamples;
  int rayDepth;
}
camera;

layout(binding = 4, set = 0, rgba32f) uniform image2D image;

float random(vec2 uv, float seed) {
  return fract(sin(mod(dot(uv, vec2(12.9898, 78.233)) + 1113.1 * seed, M_PI)) * 43758.5453);
}

void main() {
  payload.rayActive = 1;

  vec3 color = vec3(0);

  for (int j = 0; j < camera.raySamples; j++)
  {
       vec2 uv = gl_LaunchIDEXT.xy + vec2(random(gl_LaunchIDEXT.xy, camera.frameCount * 754 * j), random(gl_LaunchIDEXT.xy, camera.frameCount * 5436 * (j / 1.5)));
       uv /= vec2(gl_LaunchSizeEXT.xy);
       uv = (uv * 2.0f - 1.0f) * vec2(1.0f, -1.0f);

      payload.rayOrigin = camera.position.xyz;
      payload.rayDirection =
          normalize(uv.x * camera.right + uv.y * camera.up + camera.forward).xyz;
      payload.previousNormal = vec3(0.0, 0.0, 0.0);

      payload.directColor = vec3(0.0, 0.0, 0.0);
      payload.indirectColor = vec3(0.0, 0.0, 0.0);
      payload.rayDepth = 0;

      for (int x = 0; x < camera.rayDepth; x++) {
        traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, payload.rayOrigin, 0.001, payload.rayDirection, 10000.0, 0);
      }
      color += payload.directColor + payload.indirectColor;
  }

    vec3 oldColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    float weight = 1.0f / (camera.frameCount + 1);
    vec3 average = oldColor * (1.0f - weight) + color * weight;
    color = average;

  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1));
}

/*#version 460
#extension GL_EXT_ray_tracing : require

#define M_PI 3.1415926535897932384626433832795

layout(location = 0) rayPayloadEXT Payload {
  vec3 rayOrigin;
  vec3 rayDirection;
  vec3 previousNormal;

  vec3 directColor;
  vec3 indirectColor;
  int rayDepth;

  int rayActive;
}
payload;

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0) uniform Camera {
  vec4 position;
  vec4 right;
  vec4 up;
  vec4 forward;

  uint frameCount;
}
camera;

layout(binding = 4, set = 0, rgba32f) uniform image2D image;

float random(vec2 uv, float seed) {
  return fract(sin(mod(dot(uv, vec2(12.9898, 78.233)) + 1113.1 * seed, M_PI)) * 43758.5453);
}

void main() {
  uvec3 launchID = gl_LaunchIDEXT;
  vec2 uv = launchID.xy + vec2(random(launchID.xy, 0), random(launchID.xy, 1));
  uv /= vec2(gl_LaunchSizeEXT.xy);
  uv = (uv * 2.0f - 1.0f) * vec2(1.0f, -1.0f);

  payload.rayOrigin = camera.position.xyz;
  payload.rayDirection =
      normalize(uv.x * camera.right + uv.y * camera.up + camera.forward).xyz;
  payload.previousNormal = vec3(0.0, 0.0, 0.0);

  payload.directColor = vec3(0.0, 0.0, 0.0);
  payload.indirectColor = vec3(0.0, 0.0, 0.0);
  payload.rayDepth = 0;

  payload.rayActive = 1;

  for (int x = 0; x < 16; x++) {
    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0,
                payload.rayOrigin, 0.001, payload.rayDirection, 10000.0, 0);
  }

  vec4 color = vec4(payload.directColor + payload.indirectColor, 1.0);

  if (camera.frameCount > 0) {
    vec4 previousColor = imageLoad(image, ivec2(launchID.xy));
    previousColor *= camera.frameCount;

    color += previousColor;
    color /= (camera.frameCount + 1);
  }

  if (payload.rayDepth == 0 && payload.rayActive == 0)
    color = vec4(vec3(0.1), 1);

  imageStore(image, ivec2(launchID.xy), vec4(payload.directColor / payload.rayDepth, 1));
}*/